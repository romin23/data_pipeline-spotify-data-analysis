CREATE OR REPLACE DATABASE SPOTIFY_ETL_DB; 

CREATE OR REPLACE STORAGE INTEGRATION S3_SPOTIFY_INTEG
    TYPE = EXTERNAL_STAGE
    STORAGE_PROVIDER = S3
    ENABLED = TRUE
    STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::471112693101:role/spotify_etl_s3_role'
    STORAGE_ALLOWED_LOCATIONS = ('s3://data-spotify')
        COMMENT = 'creating connection to s3 bucket';

DESC INTEGRATION S3_SPOTIFY_INTEG;

CREATE OR REPLACE FILE FORMAT CSV_FF
TYPE = 'CSV'
FIELD_DELIMITER = ','
SKIP_HEADER = 1
FIELD_OPTIONALLY_ENCLOSED_BY = '"';

CREATE OR REPLACE TABLE TB_ALBUM(
    ALBUM_ID VARCHAR PRIMARY KEY,
    ALBUM_NAME VARCHAR,
    ALBUM_RELEASE_DATE DATE,
    ALBUM_TOTAL_TRACKS INT,
    ALBUM_URL VARCHAR
);

CREATE OR REPLACE TABLE TB_ARTIST(
    ARTIST_ID VARCHAR PRIMARY KEY,
    ARTIST_NAME VARCHAR,
    EXTERNAL_URL VARCHAR
);

CREATE OR REPLACE TABLE TB_SONG(
    SONG_ID VARCHAR PRIMARY KEY,
    SONG_NAME VARCHAR,
    SONG_DURATION_MS INT,
    SONG_URL VARCHAR,
    SONG_POPULARITY INT,
    SONG_ADDED DATE,
    ALBUM_ID VARCHAR
);


CREATE OR REPLACE TABLE TB_SONG_ARTIST (
    SONG_ID VARCHAR,
    ARTIST_ID VARCHAR,
    PRIMARY KEY (SONG_ID, ARTIST_ID)
);

CREATE OR REPLACE STAGE S3_SPOTIFY_STAGE 
    URL = 's3://data-spotify/transformed_data/'
    STORAGE_INTEGRATION = S3_SPOTIFY_INTEG
    FILE_FORMAT = CSV_FF;

DESC STAGE S3_SPOTIFY_STAGE;
LIST @S3_SPOTIFY_STAGE;


COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_ALBUM FROM
    @S3_SPOTIFY_STAGE/album/;
    
CREATE OR REPLACE TABLE  TB_ALBUM
AS
SELECT DISTINCT(ALBUM_ID), ALBUM_NAME, ALBUM_RELEASE_DATE, ALBUM_TOTAL_TRACKS, ALBUM_URL FROM TB_ALBUM;
SELECT * FROM TB_ALBUM;

COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_ARTIST FROM
    @S3_SPOTIFY_STAGE/artist/;
CREATE OR REPLACE TABLE  TB_ARTIST
AS
SELECT DISTINCT(ARTIST_ID), ARTIST_NAME, EXTERNAL_URL FROM TB_ARTIST ORDER BY ARTIST_ID;
SELECT * FROM TB_ARTIST ORDER BY ARTIST_ID;

COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_SONG FROM
    @S3_SPOTIFY_STAGE/song/;
CREATE OR REPLACE TABLE  TB_SONG
AS
SELECT DISTINCT(SONG_ID), SONG_NAME, SONG_DURATION_MS, SONG_URL, SONG_POPULARITY, SONG_ADDED, ALBUM_ID FROM TB_SONG ORDER BY SONG_ID;
SELECT * FROM TB_SONG ORDER BY SONG_ID;

COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_SONG_ARTIST FROM
    @S3_SPOTIFY_STAGE/songs_artist/;
CREATE OR REPLACE TABLE  TB_SONG_ARTIST
AS
SELECT DISTINCT SONG_ID, ARTIST_ID FROM TB_SONG_ARTIST ORDER BY SONG_ID;
SELECT * FROM TB_SONG_ARTIST;



CREATE OR REPLACE PIPE ALBUM_PIPE
    AUTO_INGEST = TRUE
    AS
    COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_ALBUM
    FROM @SPOTIFY_ETL_DB.PUBLIC.S3_SPOTIFY_STAGE/album/;
DESC PIPE ALBUM_PIPE;

CREATE OR REPLACE PIPE ARTIST_PIPE
    AUTO_INGEST = TRUE
    AS
    COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_ARTIST
    FROM @SPOTIFY_ETL_DB.PUBLIC.S3_SPOTIFY_STAGE/artist/;
DESC PIPE ARTIST_PIPE;

CREATE OR REPLACE PIPE SONG_PIPE
    AUTO_INGEST = TRUE
    AS
    COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_SONG
    FROM @SPOTIFY_ETL_DB.PUBLIC.S3_SPOTIFY_STAGE/song/;
DESC PIPE song_PIPE;

CREATE OR REPLACE PIPE SONGS_ARTIST_PIPE
    AUTO_INGEST = TRUE
    AS
    COPY INTO SPOTIFY_ETL_DB.PUBLIC.TB_SONG_ARTIST
    FROM @SPOTIFY_ETL_DB.PUBLIC.S3_SPOTIFY_STAGE/songs_artist/;
DESC PIPE SONGS_ARTIST_PIPE;




CREATE OR REPLACE VIEW vw_album_song_artist AS
SELECT 
    s.SONG_ID,
    s.SONG_NAME,
    s.SONG_DURATION_MS,
    s.SONG_POPULARITY,
    s.SONG_ADDED,
    s.ALBUM_ID,
    a.ALBUM_NAME,
    a.ALBUM_RELEASE_DATE,
    a.ALBUM_TOTAL_TRACKS,
    ar.ARTIST_ID,
    ar.ARTIST_NAME
FROM 
    TB_SONG s
JOIN 
    TB_ALBUM a ON s.ALBUM_ID = a.ALBUM_ID
JOIN 
    TB_SONG_ARTIST sa ON s.SONG_ID = sa.SONG_ID
JOIN 
    TB_ARTIST ar ON sa.ARTIST_ID = ar.ARTIST_ID;

select * from SPOTIFY_ETL_DB.PUBLIC.VW_ALBUM_SONG_ARTIST_II;